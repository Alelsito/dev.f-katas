// Ejercicio 1Ô∏è‚É£
/* Crea una funci√≥n llamada sum que reciba dos parametros "a" y "b" y regrese la suma de ambos n√∫meros. Recuerda que para devolver el valor de una funci√≥n se utiliza la palabra reservada return */

// function sum (a, b) {
//   return a + b
// }

// console.log(`La suma de a y b es igual a: ${sum(1, 2)}`)

// Ejercicio 2Ô∏è‚É£
/* Crea una funci√≥n llamada subs que reste dos parametros "a" y "b" y regrese su resultado. Recuerda que para devolver el valor de una funci√≥n se utiliza la palabra reservada return */

// function subs (a, b) {
//   return a - b
// }

// console.log(`La resta de a y b es igual a: ${subs(50, 28.5)}`)

// Ejercicio 3Ô∏è‚É£
/* Crea una variable llamada cont que sea del tipo entero, despu√©s crea otra variable llamada bool que sea del tipo booleano y por √∫ltimo una variable llamada str que sea del tipo string. Recuerda utilizar la palabra reservada var para este ejercicio. */

// const cont = 8
// const bool = true
// const str = 'perro'

// console.log(`La variable cont es igual a: ${cont}`)
// console.log(`La variable bool es igual a: ${bool}`)
// console.log(`La variable str es igual a: ${str}`)

// Ejercicio 4Ô∏è‚É£
/* Crea una funci√≥n que se llame mayorDeEdad, reciba una edad como parametro y regrese si el usuario es "Mayor de edad" o es "Menor de edad" */

// function mayorDeEdad (edad) {
//   if (edad >= 18) {
//     return 'Mayor de edad'
//   } else if (edad < 18 && edad >= 0) {
//     return 'Menor de edad'
//   }
// }

// console.log(`Pedro que tiene 19 a√±os es: ${mayorDeEdad(19)}`)
// console.log(`Marco que tiene 15 a√±os es: ${mayorDeEdad(15)}`)

// Ejercicio 5Ô∏è‚É£
/* Escribe una funci√≥n llamada evaluate que reciba como par√°metro un n√∫mero retorne lo siguiente:
        - "Positivo" si el n√∫mero es positivo.
        - "Negativo" si el n√∫mero es negativo.
        - "Cero" si el n√∫mero es cero.
*/

// First way

// function evaluate (number) {
//   if (number > 0) {
//     return 'Positivo'
//   } else if (number < 0) {
//     return 'Negativo'
//   } else if (number === 0) {
//     return 'Cero'
//   }
// }

// Second way (with Math.sign +1, -1, 0)

// function evaluate (numero) {
//   const sign = Math.sign(numero)
//   if (sign === 1) {
//     return 'Positivo'
//   } else if (sign === -1) {
//     return 'Negativo'
//   } else if (sign === 0) {
//     return 'Cero'
//   }
// }

// console.log(`El numero 20 es: ${evaluate(20)}`)
// console.log(`El numero -38 es: ${evaluate(-38)}`)
// console.log(`El numero 0 es: ${evaluate(0)}`)

// Ejercicio 6Ô∏è‚É£
/* Crear un ciclo for o while que almacene en un array llamado pares los numeros pares que hay entre el 0 y el 100, empezando desde 0 */

// V.1 (For)
// const pares = []

// for (let i = 0; i <= 100; i++) {
//   if (i % 2 === 0) {
//     pares.push(i)
//   }
// }

// console.log(pares)

// V.2 (While)
// const pares2 = []

// let number = 0

// while (number <= 100) {
//   if (number % 2 === 0) {
//     pares2.push(number)
//   }
//   number++
// }

// console.log(pares2)

// Ejercicio 7Ô∏è‚É£
/* Crea una funci√≥n llamada letter ingresar cualquier letra del alfabeto y verifique si es vocal o consonante
    - "Vocal" si la letra es una vocal.
    - "Consonante" si la letra es una consonante
*/

// First way

// function letter (letra) {
//   if (letra === 'a' || letra === 'e' || letra === 'i' || letra === 'o' || letra === 'u') {
//     return 'Vocal'
//   } else {
//     return 'Consonante'
//   }
// }

// Second way (with includes)

// function letter (character) {
//   if (character.includes('a') || character.includes('e') || character.includes('i') || character.includes('o') || character.includes('u')) {
//     return 'Vocal'
//   } else {
//     return 'Consonante'
//   }
// }

// console.log(`La letra a es: ${letter('a')}`)
// console.log(`La letra h es: ${letter('h')}`)

// Ejercicio 8Ô∏è‚É£

/* Crea una funci√≥n llamada multiple que reciba como par√°metro un n√∫mero para evaluar si un n√∫mero es divisible entre 5 y 11 o no lo es. En caso de ser divisible entre 5 y 11, retornar true En caso de no ser divisible entre 5 y 11, retornar false */

// function multiple (numero) {
//   if (numero % 5 === 0 && numero % 11 === 0) {
//     return true
//   } else {
//     return false
//   }
// }

// console.log(`El numero 55 es multiplo de 5 y de 11? ${multiple(55)}`)
// console.log(`El numero 3 es multiplo de 5 y de 11? ${multiple(3)}`)

// Ejercicio 9Ô∏è‚É£

/* Crea una funci√≥n llamada largest que reciba como par√°metro un arreglo de n√∫meros, esta funci√≥n debe retornar el n√∫mero m√°s grande del arreglo. */

// Version corta

// const numeros = [4, 213, 78, 1, 5, 8]

// function largest (numeros) {
//   return Math.max(...numeros)
// }

// console.log(`El numero mas grande del array ${numeros} es: ${largest(numeros)}`)

// Version larga

// let mayor = 0

// function largest (numeros) {
//   for (let i = 0; i < numeros.length; i++) {
//     if (numeros[i] > mayor) {
//       mayor = numeros[i]
//     }
//   }
//   return mayor
// }

// console.log(`El numero mas grande del arreglo ${numeros} es: ${largest(numeros)}`)

// Ejercicio üîü

// function game (jugador1, jugador2) {
//   if (jugador1 === 'Piedra' && jugador2 === 'Papel') {
//     return 'J2'
//   } else if (jugador1 === 'Piedra' && jugador2 === 'Tijeras') {
//     return 'J1'
//   } else if (jugador1 === 'Piedra' && jugador2 === 'Piedra') {
//     return 'Empate'
//   } else if (jugador1 === 'Papel' && jugador2 === 'Piedra') {
//     return 'J1'
//   } else if (jugador1 === 'Papel' && jugador2 === 'Tijeras') {
//     return 'J2'
//   } else if (jugador1 === 'Papel' && jugador2 === 'Papel') {
//     return 'Empate'
//   } else if (jugador1 === 'Tijeras' && jugador2 === 'Piedra') {
//     return 'J2'
//   } else if (jugador1 === 'Tijeras' && jugador2 === 'Papel') {
//     return 'J1'
//   } else if (jugador1 === 'Tijeras' && jugador2 === 'Tijeras') {
//     return 'Empate'
//   }
// }

// console.log(`Jugador1: Piedra vs Jugador 2: Papel quien gana? ${game('Piedra', 'Papel')}`)

// Ejercicio 1Ô∏è‚É£1Ô∏è‚É£

/*
  Crea una funci√≥n llamada isEqual() que reciba dos par√°metros y eval√∫e si estos son iguales.
  Retorna true. Si los dos par√°metros son iguales retorna true.
  Retorna false. Si los dos par√°metros son diferentes retorna false.
  Ten en cuenta que deben de ser iguales tanto en valor como tipo de dato.
*/

// const letra1 = 1
// const letra2 = 1
// const letra3 = '1'

// function isEqual (uno, dos) {
//   if (uno === dos) {
//     return true
//   } else {
//     return false
//   }
// }

// console.log(`Los datos letra 1 y letra 2 son iguales? ${isEqual(letra1, letra2)}`)
// console.log(`Los datos letra 1 y letra 3 son iguales? ${isEqual(letra1, letra3)}`)

// Ejercicio 1Ô∏è‚É£2Ô∏è‚É£

/*
  Crea una funci√≥n llamada isChristmas() que reciba como par√°metro una fecha cualquiera (‚Äúdia-mes-a√±o‚Äù), y verifica si dicha fecha corresponde a Navidad.
    Retorna true. En caso de que sea Navidad.
    Retorna false. En caso de no sea Navidad.
*/

// function isChristmas (fecha) {
//   // const newFecha = fecha
//   if (fecha.includes('25-12')) {
//     return true
//   } else {
//     return false
//   }
// }

// console.log(`La fecha 25-12-2022 es navidad? ${isChristmas('25-12-2022')}`)

// Ejercicio 1Ô∏è‚É£3Ô∏è‚É£

/*
  Crea una funci√≥n llamada isMinor() que recibe tres par√°metros num√©ricos y eval√∫e:
    En caso de que alguno de los n√∫meros sea menor a 10 retorna true.
    En caso de que ninguno de los n√∫meros sean menores a 10 retorna false.
*/

// Not convinced with the logic

// function isMinor (uno, dos, tres) {
//   if (uno <= 10 && dos <= 10 && tres <= 10) {
//     return false
//   } else if (uno >= 10 || dos >= 10 || tres >= 10) {
//     return true
//   }
// }

// console.log(`Los numeros 1, 5 y 9 retornan: ${isMinor(1, 5, 9)}`)
// console.log(`Los numeros 10, 3 y 4 retornan: ${isMinor(10, 3, 4)}`)
// console.log(`Los numeros 1, 30 y 4 retornan: ${isMinor(1, 30, 4)}`)
// console.log(`Los numeros 12, 39 y 48 retornan: ${isMinor(12, 39, 48)}`)

// Ejercicio 1Ô∏è‚É£4Ô∏è‚É£

/*
  Crea una funci√≥n llamada whichQuadrant(x,y) que reciba la coordenada de un punto en el plano cartesiano; es decir, recibe dos valores enteros x e y. Eval√∫e en qu√© cuadrante se ubica dicho punto.
    Retorne Cuadrante I X > 0 , Y > 0
    Retorne Cuadrante II X < 0 , Y > 0
    Retorne Cuadrante III X < 0 , Y < 0
    Retorne Cuadrante IV X > 0 , Y < 0
*/

// function whichQuadrant (x, y) {
//   if (x > 0 && y > 0) {
//     return 'Cuadrante I'
//   } else if (x < 0 && y > 0) {
//     return 'Cuadrante II'
//   } else if (x < 0 && y < 0) {
//     return 'Cuadrante III'
//   } else if (x > 0 && y < 0) {
//     return 'Cuadrante IV'
//   }
// }

// console.log(`Las cordenadas 2, 3 se encuentran en el cuadrante: ${whichQuadrant(2, 3)}`)
// console.log(`Las cordenadas -2, 3 se encuentran en el cuadrante: ${whichQuadrant(-2, 3)}`)
// console.log(`Las cordenadas -2, -3 se encuentran en el cuadrante: ${whichQuadrant(-2, -3)}`)
// console.log(`Las cordenadas 2, -3 se encuentran en el cuadrante: ${whichQuadrant(2, -3)}`)

// Ejercicio 1Ô∏è‚É£5Ô∏è‚É£

/*
  Necesitamos saber si un empleado recibir√° un aumento. Crea una funci√≥n llamada payRise() que reciba como par√°metros sueldo, a√±os de antig√ºedad y nombre del empleado. Con esos datos eval√∫e si:
    Si el sueldo es menor a 500 y su antig√ºedad es igual o mayor a 10 a√±os, retorna ‚ÄúEl empleado ‚Äònombre‚Äô, recibir√° un aumento del 20%‚Äù
    Si el sueldo es menor a 500 y su antig√ºedad es menor a 10 a√±os, retorna ‚ÄúEl empleado ‚Äònombre‚Äô, recibir√° un aumento del 5%‚Äù
    Si el sueldo es mayor o igual a 500, retorna ‚ÄúEl empleado ‚Äònombre‚Äô, no recibir√° aumento‚Äù
*/

// function payRise (sueldo, antiguedad, nombre) {
//   if (sueldo < 500 && antiguedad >= 10) {
//     return `El empleado ${nombre}, recibir√° un aumento del 20%`
//   } else if (sueldo < 500 && antiguedad < 10) {
//     return `El empleado ${nombre}, recibir√° un aumento del 5%`
//   } else if (sueldo >= 500) {
//     return `El empleado ${nombre}, no recibir√° aumento`
//   }
// }

// console.log(`Sueldo de 400, 11 a√±os de antig√ºedad, Juan:  ${payRise(400, 11, 'Juan')}`)
// console.log(`Sueldo de 300, 9 a√±os de antig√ºedad, Roberto:  ${payRise(300, 9, 'Roberto')}`)
// console.log(`Sueldo de 900, 11 a√±os de antig√ºedad, Maria:  ${payRise(900, 11, 'Maria')}`)

// Ejercicio 1Ô∏è‚É£6Ô∏è‚É£

/*
  Crea una funci√≥n llamada evaluateGrade() que reciba como par√°metro una nota (n√∫mero) y eval√∫e la calificaci√≥n seg√∫n la nota, retornando:
    Si la nota se encuentra entre 0-3: Retorna Muy deficiente
    Si la nota se encuentra entre 4-5: Retorna Insuficiente
    Si la nota se encuentra entre 6-7: Retorna Bien
    Si la nota se encuentra entre 8-9: Retorna Notable
    Si la nota se encuentra entre 10: Retorna Sobresaliente
*/

// function evaluateGrade (nota) {
//   if (nota >= 0 && nota <= 3) {
//     return 'Muy deficiente'
//   } else if (nota >= 4 && nota <= 5) {
//     return 'Insuficiente'
//   } else if (nota >= 6 && nota <= 7) {
//     return 'Bien'
//   } else if (nota >= 8 && nota <= 9) {
//     return 'Notable'
//   } else if (nota === 10) {
//     return 'Sobresaliente'
//   }
// }

// console.log(`Probar la nota 0: ${evaluateGrade(0)}`)
// console.log(`Probar la nota 6: ${evaluateGrade(6)}`)
// console.log(`Probar la nota 9: ${evaluateGrade(9)}`)

// Ejercicio 1Ô∏è‚É£7Ô∏è‚É£

/*
  Crea una funci√≥n llamada digits() que recibe como par√°metro un n√∫mero positivo de uno o dos d√≠gitos decimales (3.45), eval√∫e si el n√∫mero tiene uno o dos d√≠gitos decimales.
    Retorne Dos d√≠gitos, en caso de que tenga dos d√≠gitos decimales.
    Retorna Un d√≠gito, en caso de que tenga un d√≠gito decimal.
*/

// function digits (numero) {
//   if (typeof numero !== 'number') {
//     return null
//   } else {
//     numero = String(numero).split('.')[1]
//     if (numero.length === 1) {
//       return 'Un d√≠gito'
//     } else if (numero.length === 2) {
//       return 'Dos d√≠gitos'
//     }
//   }
// }

// console.log(`El numero 1.24: ${digits(1.24)}`)
// console.log(`El numero 404.4: ${digits(404.4)}`)
// console.log(`El numero 98.02: ${digits(98.02)}`)

// Ejercicio 1Ô∏è‚É£8Ô∏è‚É£

/*
  Crea una variable llamada idioma, que contenga un array con tres elementos, ‚ÄòEspa√±ol‚Äô, ‚ÄôIngl√©s‚Äô, ‚ÄôFranc√©s‚Äô. Posteriormente crea una funci√≥n llamada saludo(), que reciba como par√°metros un idioma ‚ÄòEspa√±ol‚Äô, ‚ÄôIngl√©s‚Äô, ‚ÄôFranc√©s‚Äô. Y que retorne:
    Retorne Hola hacker, en caso de elegir Espa√±ol
    Retorne Hello hacker, en caso de elegir Ingl√©s
    Retorne Bonjour hacker, en caso de elegir Franc√©s
*/

// const idioma = ['Espa√±ol', 'Ingl√©s', 'Franc√©s']

// function saludo (seleccion) {
//   if (typeof (seleccion) !== 'string') {
//     return null
//   }

//   if (seleccion === idioma[0]) {
//     return 'Hola hacker'
//   } else if (seleccion === idioma[1]) {
//     return 'Hello hacker'
//   } else if (seleccion === idioma[2]) {
//     return 'Bonjour hacker'
//   }
// }

// console.log(`Probar Espa√±ol: ${saludo(idioma[0])}`)
// console.log(`Probar Ingl√©s: ${saludo(idioma[1])}`)
// console.log(`Probar Franc√©s: ${saludo(idioma[2])}`)

// Ejercicio 1Ô∏è‚É£9Ô∏è‚É£

/*
  Crea una funci√≥n llamada numbersBackwards() que reciba un array de n√∫meros y retorne los n√∫meros en orden inverso. Ejemplo:
    [1,2,3,4,5,6,7,8,9,10] ‚Üí[10,9,8,7,6,5,4,3,2,1]
*/

// const array1 = [2, 5, 6, 8, 3, 4, 9]
// const array2 = [20, 56, 89, 3, 4, 789]
// const array3 = [34, 56, 72, 12, 678, 234]

// function numbersBackwards (array) {
//   return array.reverse()
// }

// console.log(`El siguiente arrat ${array1}, en forma invertida es: ${numbersBackwards(array1)}`)
// console.log(`El siguiente arrat ${array2}, en forma invertida es: ${numbersBackwards(array2)}`)
// console.log(`El siguiente arrat ${array3}, en forma invertida es: ${numbersBackwards(array3)}`)

// Ejercicio 2Ô∏è‚É£0Ô∏è‚É£

/*
  Crea una funci√≥n llamada numbers() que retorne un array donde se visualicen los n√∫meros del 1 al 10, y a la vez, una cuenta inversa de 10 a 1
*/

// function number () {
//   const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
//   const arrayReverse = [...array]
//   arrayReverse.reverse()
//   arrayReverse.map((e) => array.push(e))
//   return array
// }

// console.log(number())

// Ejercicio 2Ô∏è‚É£1Ô∏è‚É£

/*
  Crea una funci√≥n llamada teamName() que recibir√° dos par√°metros,
    El primero ser√° el nombre de equipo (string) y
    El segundo ser√° un array con el nombre de los integrantes.
  Retorna el siguiente mensaje con los par√°metros. Hay ‚Äún√∫mero de integrantes‚Äù personas en el equipo de ‚ÄúNombre del equipo‚Äù. Ellos son: ‚ÄúIntegrantes del equipo‚Äù
  Ejemplo:
  Datos de entrada:
    teamName: 'formaci√≥n'
    people: [ 'Amalia', 'Karla', 'Silvana', 'Manu', 'Jonh', 'Mike'],
  Resultado: Hay 6 personas en el equipo de formaci√≥n. Ellos son: Amalia,Karla,Silvana,Manu,Jonh,Mike.
*/

// function teamName (nombre, array) {
//   return `Hay ${array.length} personas en el equipo de ${nombre}. Ellos son: ${array.map((e) => e)}.`
// }

// console.log(`Probar Am√©rica, [Orive Peralta, Memo Ochoa, Caba√±as, Roberto Becerra]: ${teamName('Am√©rica', ['Orive Peralta', 'Memo Ochoa', 'Caba√±as', 'Roberto Becerra'])}`)

// Ejercicio 2Ô∏è‚É£2Ô∏è‚É£

/*
  Crea una funci√≥n llamada square() que reciba como par√°metro un arreglo de n√∫meros positivos y que retorne los elementos elevados al cuadrado
  NOTA: puedes utilizar map()
*/

// function square (array) {
//   return array.map((e) => e * e)
// }

// console.log(`El array [1, 2, 3, 4] con cada elemento al cuadrado es: ${square([1, 2, 3, 4])}`)
// console.log(`El array [40, 78, 19] con cada elemento al cuadrado es: ${square([40, 78, 19])}`)
// console.log(`El array [4, 6, 9, 10] con cada elemento al cuadrado es: ${square([4, 6, 9, 10])}`)

// Ejercicio 2Ô∏è‚É£3Ô∏è‚É£

/*
  Crea una funci√≥n llamada promedio() que reciba como par√°metro un arreglo de n√∫meros positivos, retorna el promedio de todos los elementos
  NOTA: puedes utilizar forOf()
*/

// function promedio (array) {
//   const initialValue = 0
//   const sum = array.reduce(
//     (previousValue, currentValue) => previousValue + currentValue,
//     initialValue
//   )
//   return sum / array.length
// }

// function promedio1 (array) {
//   let sum = 0
//   for (const num of array) {
//     sum += num
//   }
//   return sum / array.length
// }

// console.log(`${promedio([1, 2, 3, 4])}`)
// console.log(`${promedio1([1, 2, 3, 4])}`)

// Ejercicio 2Ô∏è‚É£4Ô∏è‚É£

/*
  Crea una funci√≥n llamada farenheitToCelsius() que reciba como parametro los grados farenheit y los convierta a grados cent√≠grados.
*/

// function farenheitToCelsius (grados) {
//   const centigrados = (grados - 32) * (5 / 9)
//   return centigrados
// }

// console.log(`25 grados Farenhei a Centigrados son: ${farenheitToCelsius(25)}`)
// console.log(`40 grados Farenhei a Centigrados son: ${farenheitToCelsius(40)}`)
// console.log(`36 grados Farenhei a Centigrados son: ${farenheitToCelsius(36)}`)

// Ejercicio 2Ô∏è‚É£5Ô∏è‚É£

/*
  Crea una funci√≥n llamada evaluateLetter() que reciba como par√°metro cualquier letra del alfabeto y verifique si es vocal o consonante.
    En caso de ser vocal, devolver "Vocal"
    En caso de ser consonante, devolver "Consonante
*/

// function evaluateLetter (letter) {
//   if (letter.includes('a') || letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u')) {
//     return 'Vocal'
//   } else {
//     return 'Consonante'
//   }
// }

// console.log(`La letra i es: ${evaluateLetter('i')}`)
// console.log(`La letra u es: ${evaluateLetter('u')}`)
// console.log(`La letra h es: ${evaluateLetter('h')}`)
// console.log(`La letra p es: ${evaluateLetter('p')}`)

// Ejercicio 2Ô∏è‚É£6Ô∏è‚É£

/*
  Crea una funci√≥n llamada decimalToBinary() que reciba como par√°metro un n√∫mero entero decimal y lo convierta en un n√∫mero binario retornando su resultado.
*/

function decimalToBinary (num) {
  return num.toString(2)
}

console.log(`El numero 5 a binario es: ${decimalToBinary(5)}`)
console.log(`El numero 67 a binario es: ${decimalToBinary(67)}`)
console.log(`El numero 181 a binario es: ${decimalToBinary(181)}`)
